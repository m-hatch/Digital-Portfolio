{
  "myinfo": {
    "name": "Montgomery Hatch",
    "title": "Digital Portfolio",
    "position_title": "Web Developer and Front-End/Engineer",
    "links": [
      {
        "name": "LinkedIn",
        "url": "http://www.linkedin.com/pub/montgomery-hatch/10/a4/72a"
      },
      {
        "name": "GitHub",
        "url": "https://github.com/m-hatch"
      }
    ]
  },
  "navigation": {
    "links": [
      {
        "name": "About",
        "url": "/#About"
      },
      {
        "name": "Projects",
        "url": "/#Projects"
      },
      {
        "name": "Blog",
        "url": "/blog"
        },
      {
        "name": "Contact",
        "url": "/#Contact"
      }
    ]
  },
  "about": {
    "img": "profile.png",
    "description": "<p>Hello, my name is Monte.</p><p>I'm a Web Developer with a passion for front-end technologies. I love learning and building cool things. Right now, some of my interests are React-Redux, ES6, Webpack, NodeJS, and Angular.</p><p>When not coding, I can be found performing on the stages of Lincoln Center and Carnegie Hall (and occasionally in a Broadway pit) as a classical musician. I'm also a voracious reader of fiction, and a not-very-good surfer.</p>",
    "skills_heading": "My Expertise",
    "skills_description": "I love working with all aspects of the development process.",
    "expertise": [
      {
        "is_empty": false,
        "icon": "fa-code",
        "area": "Front-End",
        "description": "I am comfortable with a variety of Javascript frameworks including React, AngularJS, or just plain vanilla Javascript! I use front end build tools such as Gulp and Webpack for asset bundling and optimization. I follow the latest developments and trends in CSS, use preprocessors like Sass, and naming strategies such as BEM for maximum maintainablility."
      },
      {
        "is_empty": false,
        "icon": "fa-database",
        "area": "Back-End",
        "description": "On the back end, I build REST APIs in Java, NodeJS, PHP, and ColdFusion, using Spring Boot, Jersey, Express, and Slim PHP. I also use server side languages like JSP/JSTL and PHP for templating in traditional MVC frameworks. I am familar with database design, SQL, and NoSQL, and connect my APIs to databases in Oracle, Postgres, MySQL, and MongoDB."
      },
      {
        "is_empty": false,
        "icon": "fa-file-text-o",
        "area": "CMS",
        "description": "I have worked extensively with content management systems, both as a developer and in administrative roles. I am a certified Hippo CMS Developer and have also worked with Wordpress, Savvy CMS, and custom-built solutions. Whether you have an enterprise level CMS or need a small custom application, I'm your man!"
      },
      {
        "is_empty": true
      },
      {
        "is_empty": false,
        "icon": "fa-comments",
        "area": "Communication",
        "description": "I believe communication is one of the most important skills you can have as a developer. With over 10 years of experience in collaborative organizations and teaching postions, I am equally comfortable taking a leadership or following role. I also have excellent written and verbal communication skills."
      },
      {
        "is_empty": true
      }
    ]
  },
  "projects": [
    {
      "name": "Digital Portfolio",
      "img": "mh.jpg",
      "img_alt": "montgomeryhatch.com",
      "tagline": "Digital Portfolio website for Montgomery Hatch",
      "description": "<p>Okay, so it's kind of meta to list this website on itself, but it was designed specifically to provide sample source code in the technologies that I'm interested in.</p><p>This website is a single page app built using React/Redux with a NodeJS/Express backend and MongoDB database. The application is built entirely with Javascript and utilizes ES6 syntax transpiled and bundled using Webpack. Typically, an application of this size would not require a Redux store to manage its state &mdash; the native React state is more than sufficient &mdash; but once again, it is included to provide an example of how I would manage state in larger applications.<!--To that end, the project also includes a unit test suite using Mocha/Chai.--></p><p class='table-heading'>Technologies used:</p><table><tr><td>Javascript</td><td>NodeJS</td><td>React.js</td><td>Redux</td></tr><tr><td>Webpack</td><td>Express</td><td>MongoDB</td><td>Mocha/Chai</td></tr><tr><td>Sass/SCSS</td></tr></table>",
      "github": "https://github.com/m-hatch/montgomeryhatch.com",
      "link": "http://montgomeryhatch.com"
    },
    {
      "name": "Bachovich Music Publications",
      "img": "bmp.png",
      "img_alt": "bachovich.com",
      "tagline": "E-commerce website for Bachovich Music Publications",
      "description": "<p>As Lead Developer for this project, I was involved in all aspects of development process from inception to deployment. This included designing the database schema in MySQL, website design, front-end development using AngularJS, back-end development using Slim PHP, development of a custom content management system, data migration, and maintenance.</p><p>This project was a great experience for me, both in terms of development, and in terms of project management and communication skills. The goal of the project was to create a dynamic, modern application that non-technical users could easily maintain and update. Deployed in 2015 and still used today, the project was a success and saved the company cosiderable costs compared to their previous web solutions.</p><p class='table-heading'>Technologies used:</p><table><tr><td>Javascript</td><td>AngularJS</td><td>Slim PHP</td><td>HTML/CSS</td></tr><tr><td>Bootstrap 3</td><td>MySQL</td></tr></table>",
      "github": "https://github.com/m-hatch/BachovichMusicPublications",
      "link": "http://www.bachovich.com"
    },
    {
      "name": "Association for Computing Machinery",
      "img": "acm.jpg",
      "img_alt": "acm.org",
      "tagline": "Website for ACM, the world's largest educational and scientific computing society",
      "description": "<p>At ACM, I am in charge of development for the flagship ACM website as well as it's numerous subdomains. The applications are built using the Hippo CMS Java framework with Gulp frontend builds. Content is delivered through a combination of user contributions to the CMS repository, data driven components, and page templates. The source code is proprietary and involves a number of files and configurations. To provide an example of what some of the more common component files typically look like, I have created a sample component on foreign films with example files on Gist.</p><ul><li><a href='https://gist.github.com/m-hatch/2b29f5da46af78ed8942b1c95e751c36' target='_blank'>Java DAO class</a></li><li><a href='https://gist.github.com/m-hatch/7b09ef5685f991ed33d6afd04cddbc8b' target='_blank'>Java Component class</a></li><li><a href='https://gist.github.com/m-hatch/4264b531e5ac2168cd1b6f9ad7853e8f' target='_blank'>CMS Contributor dialog class</a></li><li><a href='https://gist.github.com/m-hatch/15ee49ff9a9b5d287d17255ce92432c0' target='_blank'>JSP template</a></li></ul><p class='table-heading'>Technologies used:</p><table><tr><td>Java</td><td>JSP/JSTL</td><td>Hippo</td><td>Maven</td></tr><tr><td>Gulp</td><td>Javascript</td><td>Sass/SCSS</td><td>Freemarker</td></tr><tr></tr></table>",
      "github": "",
      "link": "http://www.acm.org"
    },
    {
      "name": "Hook & Loop",
      "img": "hl.jpg",
      "img_alt": "hookandloopnyc.com",
      "tagline": "Website for Hook & Loop, the creative agency of Infor",
      "description": "<p>At Infor | Hook &amp; Loop, one of my projects was to update and renovate their custom Wordpress theme. This involved a revamp of the responsive grid system (the previous system was designed mobile last), building a new navigation system, and fixing animation and parallax bugs. The code is proprietary, so I do not have a code sample, but the website is still beautiful!</p><p class='table-heading'>Technologies used:</p><table><tr><td>Javascript</td><td>PHP</td><td>jQuery</td><td>HTML/CSS</td></tr><tr><td>Wordpress</td><td>MySQL</td></tr></table>",
      "github": "",
      "link": "http://www.hookandloopnyc.com"
    },
    {
      "name": "Tally",
      "img": "pronto.jpg",
      "img_alt": "tally demo",
      "tagline": "Proof of concept for the Tally Expense app",
      "description": "<p>This was a static proof of concept for the mobile expense app Tally. It explores the idea of creating a storyline experience using animations on scroll. It was impemented using standard Javascript, jQuery, CSS 3 animations, and the Scroll Magic JS library.</p><p class='table-heading'>Technologies used:</p><table><tr><td>Javascript</td><td>jQuery</td><td>HTML/CSS</td><td>Scroll Magic</td></tr></table>",
      "github": "https://github.com/m-hatch/Tally-Demo",
      "link": "https://m-hatch.github.io/Tally-Demo"
    },
    {
      "name": "ACM APIs",
      "img": "spring.jpg",
      "img_alt": "spring boot logo",
      "tagline": "Java REST APIs of ACM",
      "description": "<p>Since joining ACM, I have taken on the lead developer role for the ACM Spring Boot APIs. These REST APIs are tightly coupled to the main website as well as a number of other websites and subdomains within the ACM umbrella. The applications are built using the Java Spring Boot framework with Hibernate, Jackson, and Lombok plugins. I use Spring Data JPA methods to connect to databases in Oracle and Postgres.</p><p>The code is propietary, but I have built a sample Spring Boot app to give a general idea of the architecture and coding style that I use.</p><p class='table-heading'>Technologies used:</p><table><tr><td>Java</td><td>Spring Boot</td><td>Hibernate</td><td>Maven</td></tr><tr><td>Spring Data JPA</td><td>Lombok</td><td>Jackson</td><td>Oracle</td></tr><tr><td>Postgres</td></tr></table>",
      "github": "https://github.com/m-hatch/Spring-Boot-Demo",
      "link": ""
    }
  ],
  "contact": {
    "heading": "Want to work together?",
    "text": "I am currently accepting new offers and would love to hear about yours. Please take a moment to tell me about it."
  },
  "blog": {
    "heading": "Welcome to my blog!",
    "description": "This is where I explore ideas and technologies that interest me. I write these posts to help others learn about the topics discussed, as well as to expand and solidify my own understanding of them.",
    "contact": "Have a comment or suggestion? Feel free to contact me.",
    "articles": [
      {
        "topic": "Modern JavaScript",
        "title": "Understanding JavaScript Versions",
        "nav_label": "javascript-versions",
        "date": "2017/11/6",
        "content": "<h3>A Bit of History</h3><p>Although it was developed under the name Mocha, when Netscape released its new scripting language in 1995, they decided to call it LiveScript. Netscape had recently developed a relationship with Sun Microsystems, the developers of Java, and hoped to capitalize on its popularity. By December of the same year, they had negotiated a license for the Java name from Sun, and LiveScript was renamed JavaScript. In 1996 Netscape submitted the language to <a href='http://www.ecma-international.org/'>Ecma International</a> for standardization. There seems to have been a debate about the naming of the new standard &mdash; JavaScript was a Sun trademark, which meant it could not be used. In the end, the name ECMAScript was chosen. <sup><a href='#footnote-1'>1</a></sup></p><p>After the initial version of ECMAScript, two new versions were released in each of the following years, 1998 and 1999, then work on the standard stalled for a decade. During this time browser vendors made their own extensions to the language, often varying from company to company, and web developers were left to sort it all out in terms of cross-browser support. In 2009, ECMAScript 5 (ES5) was released, but browser support was inconsistent for years and most developers continued writing ES3 compliant code to ensure compatibility.</p><p>At this point we should make a clear distinction between JavaScript and ECMAScript. In the early days of JavaScript, many developers and browser companies referred to the ECMAScript revisions as JavaScript versions. Today, this has been widely eliminated; JavaScript is generally used to describe the language, whereas ECMAScript describes the specification.</p><h3>Catching Up to Today</h3><p>By 2012 there was a push to stop supporting old Internet Explorer versions (Thank goodness!) and writing ES5 code became much more realistic. Work to develop the next ECMAScript standard (ES6/ES2015) was underway and developers began to describe their implementations in terms of which ECMAScript versions they supported. Features proposed for the new standard were described as being part of the ECMAScript 6th Edition (ES6), however, with the release of the 6th edition in 2015, the committee responsible for drafting the specifications decided to call it ECMAScript 2015 (ES2015). Their idea was to follow a new model of releases where new standards would be added each year as they were approved, instead of waiting for a complete specification to be finalized before making a release. The 6th edition was released under the name ECMAScript 2015 (ES2015) with subsequent releases to be named by year (ES2016, ES2017). Colloquially, the name ES.Next is typically used to describe the next standard under development. So, in 2016 ES.Next was used to describe ES2017 features; in 2017 it is used to describe the forthcoming ES2018 features.</p><h3>ECMAScript Editions</h3><div style='overflow-x: auto;'><table><tr><th>Year</th><th>Version</th><th>Name</th><th>Description</th></tr><tr><td>1997</td><td>Version 1</td><td>ES1</td><td>First Edition</td></tr><tr><td>1998</td><td>Version 2</td><td>ES2</td><td>Editorial changes only</td></tr><tr><td>1999</td><td>Version 3</td><td>ES3</td><td>Added Regular Expressions, try/catch</td></tr><tr><td>&nbsp;</td><td>Version 4</td><td>ES4</td><td>Never released</td></tr><tr><td>2009</td><td>Version 5</td><td>ES5</td><td>Added &quot;strict mode&quot;, JSON support</td></tr><tr><td>2011</td><td>Version&nbsp;5.1</td><td>ES5.1</td><td>Editorial changes</td></tr><tr><td>2015</td><td>Version 6</td><td>ES2015/ES6</td><td>Added classes and modules</td></tr><tr><td>2016</td><td>Version 7</td><td>ES2016</td><td>Added exponential operator (**), Array.prototype.includes</td></tr><tr><td>2017</td><td>Version 8</td><td>ES2017</td><td>Added Async Functions</td></tr></table></div><h3>What Standard Should I Be Coding In Now?</h3><p>Unlike the first decade of this century, adoption of the new ECMAScript standards has been progressing at a rapid pace. Browser compatibility is near universal for the ES2015 standards, and browser companies are adopting new features all the time. <a href='https://github.com/kangax/compat-table'>Kangax</a> has a great <a href='https://kangax.github.io/compat-table/es6/'>compatibility table</a> showing browser support for new ECMAScript features.</p><p>In addition, with modern transpilers like <a href='https://babeljs.io/'>Babel</a> we can write ES2015, ES2016, or ES2017 code and have the code converted for ES5 or even ES3 compatibility. This allows us to take advantage of new features and write forward compatible code without sacrificing support.</p><p>So, I say... take the dive into modern JavaScript!</p><small id='#footnote-1'>[1] Prior to 1994 ECMA was all capitals. Interestingly, ECMAScript uses pre-1994 capitalization, even though the spec came out in 1997.</small>"
      },
      {
        "topic": "Modern JavaScript",
        "title": "Classes and Objects",
        "nav_label": "classes-and-objects",
        "date": "2017/11/14",
        "content": "<p>Nam et labitur oporteat expetendis, assum mucius perpetua an sea. Habemus eligendi ad vis. Ut quas erroribus philosophia mel. In assum viris altera vim. Harum sadipscing ius id, usu eu animal commune. Utamur percipitur nec eu, est ad veritus civibus mnesarchum, ex primis theophrastus vim.</p><pre class='line-numbers'><code class='language-jsx'><script type='prism-html-markup'>import React from 'react';\n\nimport {\n  Alert,\n  Button,\n} from 'bootstrap-styled';\n\nexport default class AlertDismissExample extends React.Component {\n\n  state = {\n    visible: true,\n  };\n\n  onDismiss = () => {\n    this.setState({ visible: false });\n  };\n\n  render() {\n    return (\n      <div>\n        <Alert color='info' isOpen={this.state.visible} toggle={this.onDismiss}>\n          I am an alert and I can be dismissed!\n        </Alert>\n        <Button className='btn btn-primary' onClick={this.resetCloseAlert}>Reset alert</Button>\n      <div>\n    )\n  }\n}</script></code></pre><p>Alienum periculis patrioque ea cum. Illud denique mnesarchum cu sed, primis scaevola consulatu ut has. Corpora comprehensam id vim. Nec simul scriptorem ne, velit consul constituam ne sed, at est erat conceptam eloquentiam. Gubergren ullamcorper theophrastus vis id.</p>"
      },
      {
        "topic": "Learning Webpack",
        "title": "Building a Configuration File",
        "nav_label": "webpack-1",
        "date": "2017/11/27",
        "content": "<p>Pri pericula tincidunt ut, facer viderer eos ei, nobis timeam vituperata sed in. Summo mundi elitr sed eu, in case interesset delicatissimi nam. Ne sea soluta repudiandae. At ornatus delicata mea, sit quis decore legere et, duo ne putant placerat. Novum vulputate mei ne, quo doctus democritum definitionem ei.</p><p>Alienum periculis patrioque ea cum. Illud denique mnesarchum cu sed, primis scaevola consulatu ut has. Corpora comprehensam id vim. Nec simul scriptorem ne, velit consul constituam ne sed, at est erat conceptam eloquentiam. Gubergren ullamcorper theophrastus vis id.</p>"
      },
      {
        "topic": "Stylish CSS Selectors",
        "title": "Attribute Selectors",
        "nav_label": "attribute-selectors",
        "date": "2017/11/12",
        "content": "<p>It is always gratifying to find the perfect CSS to select exactly the DOM elements that you need without including any that you don&apos;t. Attribute selectors were introduced by the <a href='https://www.w3.org/'>W3C</a> in CSS2, and extended in CSS3. You have probably seen attribute selectors before; for example, here is a snippet from Twitter&apos;s popular <a href='https://getbootstrap.com/'>Bootstrap</a> framework using CSS2 selectors.</p><pre class='line-numbers'><code class='language-css'>input[type=\"submit\"].btn-block,\ninput[type=\"reset\"].btn-block,\ninput[type=\"button\"].btn-block {\n  width: 100%;\n}</code></pre><p>With CSS3, we have the ability to select elements based on a substring match of our defined attribute value; these are called substring matching attribute selectors. For example, if we want to target any links that go to a page ending in <code>.php</code> we could use the following style declaration:</p><pre class='line-numbers'><code class='language-css'>a[href$=\".php\"] {\n    color: purple;\n}</code></pre><p>All of the attribute selectors, both CSS2 and CSS3, are supported in all the major browsers: Chrome, Firefox, Opera, and IE (all the way down to version 7). They afford us a greater degree of targeting specificity and can come to the rescue to solve unusual development situations &mdash; such as when we do not have control over the HTML source code.</p><h3>CSS2 Attribute Selectors</h3><p>Attribute selectors were first introduced in CSS2 and this is where we will start our journey.</p><h4>[attribute], &quot;Any Value&quot; Selector</h4><p>Providing an attribute without a value will select all elements containing that attribute regardless of the value. For example, let's say we create a tooltip by using a <code>strong</code> tag with the title attribute. We can select all of these with the any value selector.</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\nstrong {\n  font-weight: bold;\n}\nstrong[title] {\n  border: solid 1px;\n}\n\n/* SCSS */\nstrong {\n  font-weight: bold;\n\n  &[title] {\n    border: solid 1px;\n  }\n}</code></pre><h4>[attribute=&quot;value&quot;], &quot;Exact Value&quot; Selector</h4><p>This might be the most commonly used attribute selector. For this rule, the value of the specified attribute must match exactly. We often see this in use for form inputs. Styles for the different <code>input</code> types &mdash; such as text, radio, or submit &mdash; can be very different and require separate styles. Using the exact value selector allows us to match the <code>input</code> elements by type so that we can style them individually.</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\ninput[type=\"text\"] {\n  width: 100%;\n}\ninput[type=\"radio\"] {\n  float: left;\n}\ninput[type=\"submit\"] {\n  padding: 15px;\n}\n\n/* SCSS */\ninput {\n  &[type=\"text\"] {\n    width: 100%;\n  }\n  &type=\"radio\"] {\n    float: left;\n  }\n  &[type=\"submit\"] {\n    padding: 15px;\n  }\n}</code></pre><p>Let&apos;s imagine another scenario: in designing an <a href='https://a11yproject.com/'>a11y</a>-compliant website, one of the requirements is to assign <a href='https://www.w3.org/WAI/intro/aria'>ARIA</a> <code>role</code> attributes to the relevant sections of the page. You have identified three sections which repeat on every page, a banner, the main content area, and a social links section. There are CSS styles that you want to add for each of the sections. Many times we might use classes for this, like <code>.banner</code>, <code>.main-content</code>, and <code>.social-links</code>, but you already have ARIA markup representing the <em>exact same thing</em>! You could easily use the <code>role</code> attribute to apply your styles.</p><pre class='line-numbers'><code class='language-html'><script type='prism-html-markup'><!-- We could use classes like this -->\n<div class=\"banner\" role=\"banner\"></div>\n<div class=\"main-content\" role=\"main-content\"></div>\n<div class=\"social-links\" role=\"social-links\"></div>\n\n<!-- Or we could use the ARIA role \nvalues to save ourselves some markup -->\n<div role=\"banner\"></div>\n<div role=\"main-content\"></div>\n<div role=\"social-links\"></div></script></code></pre><pre class='line-numbers'><code class='language-scss'>/* Using regular classes */\n.banner {\n  font-size: 2em;\n}\n.main-content {\n  font-size: 1em;\n}\n.social-links {\n  font-size: .8em;\n}\n\n/* Using the role attribute */\ndiv[role=\"banner\"] {\n  font-size: 2em;\n}\ndiv[role=\"main-content\"] {\n  font-size: 1em;\n}\ndiv[role=\"social-links\"] {\n  font-size: .8em;\n}\n\n/* SCSS */\ndiv {\n  &[role=\"banner\"] {\n    font-size: 2em;\n  }\n  &[role=\"main-content\"] {\n    font-size: 1em;\n  }\n  &[role=\"social-links\"] {\n    font-size: .8em;\n  }\n}</code></pre><h4>[attribute~=&quot;value&quot;], &quot;Whitespace Separated&quot; Selector</h4><p>The whitespace separated selector matches all elements where the specified attribute contains the word indicated. The value of the attribute may be alone or in a space delimited list. Let's look at an example using the <code>data-</code> attribute. According to the HTML specification, a <code>data-</code> attribute accepts only a single value. So if you had the element <code>&lt;div data-type=&quot;module accordion expand&quot;&gt;&lt;/div&gt;</code>, the value of the <code>data-type</code> attribute would be a single string <code>&quot;module accordion expand&quot;</code>. What if you wanted to extend this functionality to include a list of values? On the JavaScript side, you could use <code>split(' ')</code> to create an array of string values, but how could you access these values individually in CSS? Enter the whitespace separated selector!</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\ndiv[data-type~=\"module\"] {\n  /* Matches whenever 'module' is in the list */\n}\ndiv[data-type~=\"accordion\"] {\n  /* Matches whenever 'accordion' is in the list */\n}\ndiv[data-type~=\"expand\"] {\n  /* Matches whenever 'expand' is in the list */\n}\n\n/* SCSS */\ndiv {\n  &[data-type~=\"module\"] {\n    // Matches whenever 'module' is in the list\n  }\n  &data-type~=\"accordion\"] {\n    // Matches whenever 'accordion' is in the list\n  }\n  &[data-type~=\"expand\"] {\n    // Matches whenever 'expand' is in the list\n  }\n}</code></pre><p>It is worth noting that the word can appear in any position of the list (beginning, middle, end), but it must be separated by whitespace. There is another attribute selector that we will talk about later (<code>[attribute*=&quot;value&quot;]</code>) which selects a substring from an attribute value, however it is a bit less strict. If we were to have the selector <code>[attribute*=&quot;module&quot;]</code> it would match the substring <code>'submodule'</code> as well as <code>'module'</code>. The whitespace separated selector will only match the exact word.</p><h4>[attribute|=&quot;value&quot;], &quot;Dash Separated&quot; Selector</h4><p>Similar to the whitespace separated selector, the dash separated selector will only match if the selected attribute value is at the <strong>start</strong> of a dash-separated list. I have not found this to be a widely used selector, but one perfect use case is selecting language subcodes. Consider the following markup:</p><pre class='line-numbers'><code class='language-html'><script type='prism-html-markup'><div>\n  <span lang=\"en-US\">English US</span>\n  <span lang=\"en-GB\">English UK</span>\n  <span lang=\"de\">German</span>\n</div></script></code></pre><p>If we wanted to select only the English version languages, we could use the dash separated selector.</p><pre class='line-numbers'><code class='language-css'>/* Matches both 'en-US' and 'en-GB' */\nspan[lang|=\"en\"] {\n  color: blue;\n}</code></pre><p>Like the whitespace separated selector, the attribute value must match the entire word before the first dash. For other use cases, like if you wanted to match both <code>rel=&quot;example1&quot;</code> and <code>rel=&quot;example2&quot;</code>, you could use the starts with selector (<code>[attribute^=&quot;value&quot;]</code>) discussed next. </p><h3>CSS3 Substring Matching Attribute Selectors</h3><p>With the release of CSS3, the <a href='https://www.w3.org/'>W3C</a> introduced three new attribute selectors called substring matching attribute selectors. These selectors work with the value of the specified attribute to match the beginning, end, or slice of the value to a given substring.</p><h4>[attribute^=&quot;value&quot;], &quot;Begins With&quot; Selector</h4><p>The begins with selector matches any element with an attribute value beginning with the specified substring. For example, if you wanted to target all the <code>img</code> tags from a particular directory, you could use a selector like this:</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\nimg[src^=\"products/\"] {\n  width: 100%;\n  height: auto;\n}\n\n/* SCSS */\nimg {\n  &[src^=\"products/\"] {\n    width: 100%;\n    height: auto;\n  }\n}</code></pre><p>Any images that are retrieved from the products directory are matched, while any images with a path beginning with something other than <code>products/</code> are not matched.</p><h4>[attribute$=&quot;value&quot;], &quot;Ends With&quot; Selector</h4><p>A mirror to the begins with selector, the ends with selector matches any element with an attribute value ending with the specified substring. A perfect example is adding an image icon to links based on the file type.</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\na[href$=\".pdf\"] {\n  background: transparent url(icon-pdf.png) center right no-repeat;\n  padding-right: 20px;\n}\na[href$=\".docx\"] {\n  background: transparent url(icon-docx.png) center right no-repeat;\n  padding-right: 20px;\n}\na[href$=\".xlsx\"] {\n  background: transparent url(icon-xlsx.png) center right no-repeat;\n  padding-right: 20px;\n}\n\n/* SCSS */\na {\n  &[href$=\".pdf\"] {\n    background: transparent url(icon-pdf.png) center right no-repeat;\n    padding-right: 20px;\n  }\n  &[href$=\".docx\"] {\n    background: transparent url(icon-docx.png) center right no-repeat;\n    padding-right: 20px;\n  }\n  &[href$=\".xlsx\"] {\n    background: transparent url(icon-xlsx.png) center right no-repeat;\n    padding-right: 20px;\n  }\n}</code></pre><h4>[attribute*=&quot;value&quot;], &quot;Contains&quot; Selector</h4><p>The last of the substring selectors is the contains selector. This is a versatile selector that will match any element with an attribute value that contains at least one instance of the substring, located anywhere within the value. Let's say you had HTML markup with different costume products. The <code>id</code> attribute values are all different, but you still wanted to select all the costume products.</p><pre class='line-numbers'><code class='language-html'><script type='prism-html-markup'><div>\n  <div id=\"renaissance-costume\"></div>\n  <div id=\"anime-costume-bundle\"></div>\n  <div id=\"discount-costumes\"></div>\n</div></script></code></pre><p>You could solve this situation using the contains selector!</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\ndiv[id*=\"costume\"] {\n  padding: 2em;\n}\n\n/* SCSS */\ndiv {\n  &[id*=\"costume\"] {\n    padding: 2em;\n  }\n}</code></pre><h3>Combining Attribute Selectors</h3><p>Just like all other CSS selectors, attribute selectors can be chained with any other selector. In the Bootstrap example we saw at the beginning of this post we had an exact value attribute selector chained with a class selector.</p><pre class='line-numbers'><code class='language-css'>input[type=\"submit\"].btn-block,\ninput[type=\"reset\"].btn-block,\ninput[type=\"button\"].btn-block {\n  width: 100%;\n}</code></pre><p>This example uses a combination of attribute selector and class selector to match all <code>input</code> tags with the types <code>submit</code>, <code>reset</code>, and <code>button</code> and the class <code>.btn-block</code></p><p>The same can be done with two attribute selectors. For example, let's say we want to target copyright links that go to a specific domain, but there are multiple subpaths (like <em>&quot;https://www.example.org/first-copyright&quot;</em> and <em>&quot;https://www.example.org/second-copyright&quot;</em>). Our first thought is to use a starts with selector to capture links that begin with the string <em>&quot;https://www.example.org/&quot;</em>, but there is a catch. Our site also has links to content pages in the same domain (<em>&quot;https://www.example.org/article-content&quot;</em>). We only want the copyright links. We can solve this problem by combining an exact value selector with a begins with selector.</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\na[rel=\"copyright\"][href^=\"https://www.example.org/\"] {\n  text-decoration: underline;\n}\n\n/* SCSS */\na {\n  &[rel=\"copyright\"] {\n    &[href^=\"https://www.example.org/\"] {\n      text-decoration: underline;\n    }\n  }\n}</code></pre><p>There is a lot of granularity available with CSS attribute selectors. For an excellent cheat sheet of CSS attribute selectors as well as many others, check out <a href='http://www.cheetyr.com/css-selectors'>this list</a> by Cheetyr. If you are interested in diving into the specs, there is great information at <a href='https://www.w3.org/TR/#tr_CSS'>W3C</a>.</p>"
      }
    ]
  }
}