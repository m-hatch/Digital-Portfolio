{
  "blog": {
    "heading": "Welcome to my blog!",
    "description": "This is where I explore ideas and technologies that interest me. I write these posts to help others learn about the topics discussed, as well as to expand and solidify my own understanding of them.",
    "contact": "Have a comment or suggestion? Feel free to contact me.",
    "articles": [
      {
        "topic": "Modern JavaScript",
        "title": "Understanding JavaScript Versions",
        "nav_label": "javascript-versions",
        "date": "2017/11/6",
        "content": "<h3>A Bit of History</h3><p>Although it was developed under the name Mocha, when Netscape released its new scripting language in 1995, they decided to call it LiveScript. Netscape had recently developed a relationship with Sun Microsystems, the developers of Java, and hoped to capitalize on its popularity. By December of the same year, they had negotiated a license for the Java name from Sun, and LiveScript was renamed JavaScript. In 1996 Netscape submitted the language to <a href='http://www.ecma-international.org/'>Ecma International</a> for standardization. There seems to have been a debate about the naming of the new standard &mdash; JavaScript was a Sun trademark, which meant it could not be used. In the end, the name ECMAScript was chosen. <sup><a href='#footnote-1'>1</a></sup></p><p>After the initial version of ECMAScript, two new versions were released in each of the following years, 1998 and 1999, then work on the standard stalled for a decade. During this time, browser vendors made their own extensions to the language, often varying from company to company, and web developers were left to sort it all out in terms of cross-browser support. In 2009, ECMAScript 5 (ES5) was released, but browser support was inconsistent for years and most developers continued writing ES3 compliant code to ensure compatibility.</p><p>At this point we should make a clear distinction between JavaScript and ECMAScript. In the early days of JavaScript, many developers and browser companies referred to the ECMAScript revisions as JavaScript versions. Today, this has been widely eliminated; JavaScript is generally used to describe the language, whereas ECMAScript describes the specification.</p><h3>Catching Up to Today</h3><p>By 2012 there was a push to stop supporting old Internet Explorer versions (Thank goodness!), and writing ES5 code became much more realistic. Work to develop the next ECMAScript standard (ES6/ES2015) was underway and developers began to describe their implementations in terms of which ECMAScript versions they supported. Features proposed for the new standard were described as being part of the ECMAScript 6th Edition (ES6), however, with the release of the 6th edition in 2015, the committee responsible for drafting the specifications decided to call it ECMAScript 2015 (ES2015). Their idea was to follow a new model of releases where new standards would be added each year as they were approved, instead of waiting for a complete specification to be finalized before making a release. The 6th edition was released under the name ECMAScript 2015 (ES2015) with subsequent releases to be named by year (ES2016, ES2017). Colloquially, the name ES.Next is typically used to describe the next standard under development. So, in 2016 ES.Next was used to describe ES2017 features; in 2017 it is used to describe the forthcoming ES2018 features.</p><h3>ECMAScript Editions</h3><div style='overflow-x: auto;'><table><tr><th>Year</th><th>Version</th><th>Name</th><th>Description</th></tr><tr><td>1997</td><td>Version 1</td><td>ES1</td><td>First Edition</td></tr><tr><td>1998</td><td>Version 2</td><td>ES2</td><td>Editorial changes only</td></tr><tr><td>1999</td><td>Version 3</td><td>ES3</td><td>Added Regular Expressions, try/catch</td></tr><tr><td>&nbsp;</td><td>Version 4</td><td>ES4</td><td>Never released</td></tr><tr><td>2009</td><td>Version 5</td><td>ES5</td><td>Added &quot;strict mode&quot;, JSON support</td></tr><tr><td>2011</td><td>Version&nbsp;5.1</td><td>ES5.1</td><td>Editorial changes</td></tr><tr><td>2015</td><td>Version 6</td><td>ES2015/ES6</td><td>Added classes and modules</td></tr><tr><td>2016</td><td>Version 7</td><td>ES2016</td><td>Added exponential operator (**), Array.prototype.includes</td></tr><tr><td>2017</td><td>Version 8</td><td>ES2017</td><td>Added Async Functions</td></tr></table></div><h3>What Standard Should I Be Coding In Now?</h3><p>Unlike the first decade of this century, adoption of the new ECMAScript standards has been progressing at a rapid pace. Browser compatibility is near universal for the ES2015 standards, and browser companies are adopting new features all the time. <a href='https://github.com/kangax/compat-table'>Kangax</a> has a great <a href='https://kangax.github.io/compat-table/es6/'>compatibility table</a> showing browser support for new ECMAScript features.</p><p>In addition, with modern transpilers like <a href='https://babeljs.io/'>Babel</a> we can write ES2015, ES2016, or ES2017 code and have the code converted for ES5 or even ES3 compatibility. This allows us to take advantage of new features and write forward compatible code without sacrificing support.</p><p>So, I say... take the dive into modern JavaScript!</p><small id='#footnote-1'>[1] Prior to 1994 ECMA was all capitals. Interestingly, ECMAScript uses pre-1994 capitalization, even though the spec came out in 1997.</small>"
      },
      {
        "topic": "Modern JavaScript",
        "title": "Rest and Spread Operators",
        "nav_label": "rest-and-spread",
        "date": "2017/11/26",
        "content": "<h4>Trouble with three dots <code>...</code></h4><p>When I started learning ES6, I found myself getting mixed up with rest and spread operators. After all, they both use the same syntax (<code>...</code>), but have opposite functionalities. While the rest operator collects multiple elements and <em>condenses</em> them into a single element, the spread operator <em>expands</em> an array into multiple elements. The &quot;ah-ha&quot; moment came for me when I realized this simple mantra: <strong>The rest operator is for parameters and the spread operator is for variables</strong>. What that means is: we apply the rest operator to a parameter in a function header, and we apply the spread operator to an array variable. Let&apos;s take a look at some examples, and we will see how this simple statement gives us all the information we need to remember how and which way this new syntax sugar is used.</p><h3>The Rest Operator</h3><p>The rest parameter is three dots preceding a function header parameter. It allows us allows us to represent an indefinite number of arguments in the form of an array.</p><pre class='line-numbers'><code class='language-javascript'>function func(param1, param2, ...allTheOtherParams) {\n  // ...\n}</code></pre><h4>Rest parameters and the <code>arguments</code> object</h4><p>JavaScript has always allowed a variable number of function parameters. These are exposed through the special <code>arguments</code> variable. The problem with <code>arguments</code> is that it is not a real JavaScript array. It is an <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments'>array-like object</a> with properties like <code>length</code> that allow us to iterate through the list of values.</p><pre class='line-numbers'><code class='language-javascript'>function add() {\n  var total = 0;\n  for(var i = 0; i < arguments.length; i++) {\n    total += arguments[i];\n  }\n  return total;\n}\nadd(); // returns 0\nadd(3); // returns 3\nadd(4, 12, 9); // returns 25</code></pre><p>This becomes a problem when we want to use <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Methods'>Array.prototype</a> methods, like the ES5 <code>reduce()</code>. Prior to ES6, developers had to use methods like <code>call()</code> to get around the array-like properties of the <code>arguments</code> object.</p><pre class='line-numbers'><code class='language-javascript'>function add() {\n  return arguments.reduce(function(sum, next) {\n    return sum + next;\n  });\n}\nadd(3, 4, 5); // returns TypeError: arguments.reduce is not a function\n\nfunction add() {\n  // convert arguments object to array\n  var args = Array.prototype.slice.call(arguments);\n\n  // then call reduce on the array\n  return args.reduce(function(sum, next) {\n    return sum + next;\n  });\n}\nadd(3, 4, 5); // returns 12</code></pre><p>Enter the rest parameter. The rest parameter assigns the remaining parameter values to an array, which we can then use to call <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Methods'>Array.prototype</a> methods. Here is <code>add()</code> rewritten in ES6 using rest parameters:</p><pre class='line-numbers'><code class='language-javascript'>function add(...numbers) {\n  return numbers.reduce((sum, next) => sum + next);\n}\nadd(3, 4, 5); // returns 12</code></pre><h4>Using rest parameters with other parameters</h4><p>Unlike the <code>arguments</code> object, which contains <strong>all</strong> parameters passed to a function, the rest parameter only contains those parameters that have not been given a separate name in the function header. Additionally, there can only be one rest parameter per function, and it must be the last parameter declared. Attempting to have multiple rest parameters or putting one before other parameters will throw a <code>SyntaxError</code>.</p><pre class='line-numbers'><code class='language-javascript'>function afterRest(first, ...second, third) {\n  // SyntaxError: parameter after rest parameter\n}\nfunction multipleRest(first, ...second, ...third) {\n  // SyntaxError: parameter after rest parameter\n}</code></pre><p>If we modify our <code>add()</code> function to perform different math operations, we could pass the operator as a named parameter along with a rest parameter to accept zero or more arguments.</p><pre class='line-numbers'><code class='language-javascript'>function calculator(operator, ...numbers) {\n  switch(operator) {\n    case 'add':\n      return numbers.reduce((sum, next) => sum + next);\n    case 'subtract':\n      return numbers.reduce((sum, next) => sum - next);\n    default:\n      return 'Operator required';\n  }\n}</code></pre><h3>The Spread Operator</h3><p>The spread operator looks very much like the rest operator &mdash; three dots preceeding a variable or literal &mdash; but where the rest parameter combines arguments into an array, spread syntax expands an array (or other <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols'>iterable</a>) into multiple values. Here is where my confusion often came into play. Let&apos;s take a look at our <code>add()</code> function from above and call it using spread syntax.</p><pre class='line-numbers'><code class='language-javascript'>function add(...numbers) {\n  return numbers.reduce((sum, next) => sum + next);\n}\n\nconst numbers = [3, 4, 5];\nadd(...numbers); // returns 12</code></pre><p>If you are like me, this might seem confusing. We see two examples of <code>add(...numbers)</code>, but while one represents a variable number of parameters, the other is destructuring an array into multiple values. Here is where my mantra comes into play. <strong>The rest operator is for parameters and the spread operator is for variables.</strong> The rest operator is used in the <em>function header</em> to describe zero or more unnamed parameters, whereas the spread operator is used in the <em>function call</em> to expand the <code>numbers</code> variable into multiple arguments and pass them to the function. Prior to ES6 you would have to use <code>apply()</code> to achieve the same result.</p><pre class='line-numbers'><code class='language-javascript'>function add(...numbers) {\n  return numbers.reduce((sum, next) => sum + next);\n}\n\nconst numbers = [3, 4, 5];\nadd.apply(null, numbers); // returns 12</code></pre><p>We can also use spread syntax multiple times, with other arguments, and in any order.</p><pre class='line-numbers'><code class='language-javascript'>function add(...numbers) {\n  return numbers.reduce((sum, next) => sum + next);\n}\n\nconst numbers = [3, 4, 5];\nconst moreNumbers = [7, 8];\nadd(1, 2, ...numbers, 6, ...moreNumbers); // returns 36</code></pre><h4>Spread syntax in assignments</h4><p>Spread syntax provides a more succinct way to create new arrays from existing arrays. Without spread, array literal syntax is insufficient and it becomes necessary to use a combination of <code>push()</code>, <code>splice()</code>, <code>concat()</code>, and other methods to write the code imperatively. With spread syntax, we can accomplish this much more cleanly.</p><pre class='line-numbers'><code class='language-javascript'>const array1 = [2, 3];\nconst array2 = [4, 5];\nconst array3 = [1, ...array1, 4, 5];\nconst array4 = [1, ...array1, ...array2];\n \n// array3 = [1, 2, 3, 4, 5]\n// array4 = [1, 2, 3, 4, 5]</code></pre><p>This becomes useful in a variety of cases, including copying an array or concatenating arrays. Be aware, however, that spread syntax only goes one level deep when copying arrays, so it may not be suitable for copying multidimentional arrays.</p><pre class='line-numbers'><code class='language-javascript'>const array1 = [1, 2, 3];\nconst array2 = [...array1]; // like array1.slice()\narray2.push(4);\n\n// array1 = [1, 2, 3] array1 is unaffected\n// array2 = [1, 2, 3, 4]\n\nlet array3 = ['a', 'b', 'c'];\nconst array4 = ['d', 'e', 'f'];\narray3 = [...array3, ...array4]; // like array3.concat(array4)\n\n// array3 = ['a', 'b', 'c', 'd', 'e', 'f'];</code></pre><p>Rest and spread operators make common programming tasks much simpler and more concise, such as accessing and handling an unknown number of function parameters, or array and object construction and destructuring. Try integrating them into your development process &mdash; just be sure to remember which is which!</p>"
      },
      {
        "topic": "Learning Webpack",
        "title": "Building a Configuration File",
        "nav_label": "webpack-configuration",
        "date": "2017/12/5",
        "content": "<h3>What is Webpack</h3><p>Webpack has become one of today&apos;s most popular front-end development tools. It works great with the most modern of front-end workflows including <a href='https://babeljs.io/'>Babel</a>, <a href='https://reactjs.org/'>ReactJS</a>, and <a href='http://eng.wealthfront.com/2015/06/16/an-introduction-to-commonjs/'>CommonJS</a>, but what exactly is it and what does it do? In Webpack&apos;s <a href='https://webpack.js.org/concepts/'>documentation</a>, we get the following definition:</p><blockquote>Webpack is a static module bundler for modern JavaScript applications. When Webpack processes your application, it recursively builds a dependency graph that includes every module your application needs, then packages all of those modules into one or more bundles. </blockquote><p>If we distill this to its most basic meaning: Webpack looks at a source file, examines its dependencies, and compiles an output bundle. If our source file requires other modules &mdash; like <a href='https://auth0.com/blog/javascript-module-systems-showdown/'>CommonJS, AMD, or ES2015</a> &mdash; Webpack will do some work under the hood in the build process, and produce a bundled file that can be used in any JavaScript environment.</p><p>When first diving into Webpack, it is easy to just find a boilerplate configuration file and make a few edits to get it working. The problem with this approach comes when you need to make more complex modifications or debug an unexpected result. You may find yourself stabbing around in the dark, wondering what all those lines of boilerplate are actually doing. In this post series, we will look at a bare-bones Webpack configuration, so that we can clearly understand each of the parts and what they do.</p><h3>Setting up a project</h3><p>The official Webpack <a href='https://webpack.js.org/'>website</a> has a beautiful example on the homepage.</p><p><strong>app.js</strong></p><pre class='line-numbers'><code class='language-javascript'>import bar from './bar';\n\nbar();</code></pre><p><strong>bar.js</strong></p><pre class='line-numbers'><code class='language-javascript'>export default function bar() {\n  //\n}</code></pre><p><strong>webpack.config.js</strong></p><pre class='line-numbers'><code class='language-javascript'>module.exports = {\n  entry: './app.js',\n  output: {\n    filename: 'bundle.js'\n  }\n};</code></pre><p><strong>page.html</strong></p><pre class='line-numbers'><code class='language-html'><script type='prism-html-markup'><html>\n  <head>\n    ...\n  </head>\n  <body>\n    ...\n</script>    &lt;script src=\"bundle.js\">&lt;/script><script type='prism-html-markup'>\n  </body>\n</html></script></code></pre><p>This is all you need to create a basic Webpack bundle! The following post shows how to build a project based on this example in simple digestible steps. You should have a basic understanding of JavaScript modules; if not, you can read more about them <a href='https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc'>here</a>.</p><h4>Node.js and NPM</h4><p>First, we need to create a new project using <a href='https://www.npmjs.com/'>Node Package Manager</a> (NPM). We can do this by running the following command in our project workspace to create a <code>package.json</code> file.</p><pre><code class='language-bash'>npm init</code></pre><p>Next, we add Webpack as a dependency and create an empty JavaScript file.</p><pre><code class='language-bash'>npm install webpack --save-dev\nmkdir src && touch src/app.js</code></pre><h4>Building a bundle</h4><p>We can now run Webpack scripts from our project as NPM scripts. Let&apos;s create a script called <code>build</code> and add it to our <code>package.json</code> file.</p><pre class='line-numbers'><code class='language-json'>{\n  \"scripts\": {\n    \"build\": \"webpack\"\n  }\n}</code></pre><p>This allows us to run the command <code>npm run build</code> from the command line. If we do so now, we receive the following error:</p><pre><code class='language-bash'>No configuration file found and no output filename configured via CLI option.\nA configuration file could be named 'webpack.config.js' in the current directory.\nUse --help to display the CLI options.</code></pre><p>We have not provided any configuration yet. At a minimum, Webpack needs an entry point and an output configuration. In our bare-bones setup, we can do this with the CLI by adding some arguments to our <code>build</code> script. The argument <code>--entry</code> specifies the entry file, and <code>--output-filename</code> specifies where the bundle should compile to. Adding these to our <code>build</code> script, we get:</p><pre class='line-numbers'><code class='language-json'>{\n  \"scripts\": {\n    \"build\": \"webpack --entry ./src/app.js --output-filename ./dist/bundle.js\"\n  }\n}</code></pre><p>Now when we run <code>npm run build</code>, Webpack successfully compiles a bundle file to <code>dist/bundle.js</code>.</p><h4>What&apos;s inside the compiled bundle?</h4><p>We have just created our first bundle file using <code>app.js</code> as our entry point. If you open <code>bundle.js</code> you will see approximately 70 lines of well-commented code &mdash; but <code>app.js</code> is still empty! What is this code, and what does it do? Looking at our nascent bundle, we see that Webpack sets up our project in the following ways:</p><ol>  <li>It wraps everything in an IIFE, which gets invoked with all our modules.</li>  <li>It creates a <code>__webpack_require__</code> function, which internally requires modules when needed.</li>  <li>Webpack kicks off by running the first module (<code>app.js</code>) using the <code>__webpack_require__</code> function.</li>  <li>All previous <code>require</code> statements get replaced with an invocation of <code>__webpack_require__</code> with the correct module index passed in from the modules array.</li></ol><h4>Setting up a configuration file</h4><p>While it is possible to create a basic bundle file using the CLI, for more complicated projects we are better off using a configuration file. If we want, we can specify a configuration file using the <code>--config</code> argument in the build script.</p><pre class='line-numbers'><code class='language-json'>{\n  \"scripts\": {\n    \"build\": \"webpack --config ./config.js\"\n  }\n}</code></pre><p>Here we are specifying <code>config.js</code> as the configuration file. However, by default Webpack looks for a configuration file named <code>webpack.config.js</code>, located in the same directory where <code>webpack</code> is run. If we use the default configuration file name, we can revert our <code>build</code> script back to what we started with.</p><pre><code class='language-bash'>touch webpack.config.js</code></pre><pre class='line-numbers'><code class='language-json'>{\n  \"scripts\": {\n    \"build\": \"webpack\"\n  }\n}</code></pre><p>Now we need to add our entry point and output settings to <code>webpack.config.js</code>. A Webpack configuration is just an exported object. The entry point and output configuration are mapped to key-value pairs in our object. In the CLI, we mapped <code>--output-filename</code> to <code>./dist/bundle.js</code>; here we have divided our <code>output</code> configuration into two key-value pairs: <code>path</code> &ndash; which specifies the output path of our bundle, and <code>filename</code> &ndash; which specifies the filename of our bundle.</p><pre class='line-numbers'><code class='language-javascript'>const webpack = require('webpack');\n\nmodule.exports = {\n  entry: __dirname + '/src/app.js',\n  output: {\n    path: __dirname + '/dist',\n    filename: 'bundle.js'\n  }\n};</code></pre><p>Running <code>npm run build</code> again, we get the same output.</p><h4>Populating our JavaScript modules</h4><p>If we look back at our example from the Webpack <a href='https://webpack.js.org/'>documentation</a> page, we see that <code>app.js</code> is importing another JavaScript file.</p><pre class='line-numbers'><code class='language-javascript'>import bar from './bar';\n\nbar();</code></pre><p>Let&apos;s create the file <code>bar.js</code> and populate it with a simple Hello World! function.</p><pre><code class='language-bash'>touch src/bar.js</code></pre><pre class='line-numbers'><code class='language-javascript'>export default function bar() {\n  console.log('Hello World!');\n}</code></pre><p>Now we can re-bundle our JavaScript by running <code>npm run build</code> again, and see our <code>bar</code> module bundled into <code>bundle.js</code>! We can also test our bundle file by running it through the Node command line.</p><pre><code class='language-bash'>node ./dist/bundle.js\n\noutput: Hello World!</code></pre><p>All we have to do now is include our bundled JS file where we want it. Following the Webpack site example, let&apos;s add the following:</p><pre><code class='language-bash'>touch dist/page.html</code></pre><pre class='line-numbers'><code class='language-html'><script type='prism-html-markup'><html>\n  <head>\n    ...\n  </head>\n  <body>\n    ...\n</script>    &lt;script src=\"bundle.js\">&lt;/script><script type='prism-html-markup'>\n  </body>\n</html></script></code></pre><p>Using a Webpack build process is extremely powerful &mdash; particularly for JavaScript driven, component-based, single page applications like those built with <a href='https://reactjs.org/'>React</a> or <a href='https://angular.io/'>Angular</a>. In the next installment of <em>Learning Webpack</em> we&apos;ll talk about loaders, and things will get even more amazing!</p>"
      },
      {
        "topic": "Stylish CSS",
        "title": "Attribute Selectors",
        "nav_label": "attribute-selectors",
        "date": "2017/11/12",
        "content": "<p>It is always gratifying to find the perfect CSS to select exactly the DOM elements that you need without including any that you don&apos;t. Attribute selectors were introduced by the <a href='https://www.w3.org/'>W3C</a> in CSS2, and extended in CSS3. You have probably seen attribute selectors before; for example, here is a snippet from Twitter&apos;s popular <a href='https://getbootstrap.com/'>Bootstrap</a> framework using CSS2 selectors.</p><pre class='line-numbers'><code class='language-css'>input[type=\"submit\"].btn-block,\ninput[type=\"reset\"].btn-block,\ninput[type=\"button\"].btn-block {\n  width: 100%;\n}</code></pre><p>With CSS3, we have the ability to select elements based on a substring match of our defined attribute value; these are called substring matching attribute selectors. For example, if we want to target any links that go to a page ending in <code>.php</code> we could use the following style declaration:</p><pre class='line-numbers'><code class='language-css'>a[href$=\".php\"] {\n    color: purple;\n}</code></pre><p>All of the attribute selectors, both CSS2 and CSS3, are supported in all the major browsers: Chrome, Firefox, Opera, and IE (all the way down to version 7). They afford us a greater degree of targeting specificity and can come to the rescue to solve unusual development situations &mdash; such as when we do not have control over the HTML source code.</p><h3>CSS2 Attribute Selectors</h3><p>Attribute selectors were first introduced in CSS2 and this is where we will start our journey.</p><h4>[attribute], &quot;Any Value&quot; Selector</h4><p>Providing an attribute without a value will select all elements containing that attribute regardless of the value. For example, let's say we create a tooltip by using a <code>strong</code> tag with the title attribute. We can select all of these with the any value selector.</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\nstrong {\n  font-weight: bold;\n}\nstrong[title] {\n  border: solid 1px;\n}\n\n/* SCSS */\nstrong {\n  font-weight: bold;\n\n  &[title] {\n    border: solid 1px;\n  }\n}</code></pre><h4>[attribute=&quot;value&quot;], &quot;Exact Value&quot; Selector</h4><p>This might be the most commonly used attribute selector. For this rule, the value of the specified attribute must match exactly. We often see this in use for form inputs. Styles for the different <code>input</code> types &mdash; such as text, radio, or submit &mdash; can be very different and require separate styles. Using the exact value selector allows us to match the <code>input</code> elements by type so that we can style them individually.</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\ninput[type=\"text\"] {\n  width: 100%;\n}\ninput[type=\"radio\"] {\n  float: left;\n}\ninput[type=\"submit\"] {\n  padding: 15px;\n}\n\n/* SCSS */\ninput {\n  &[type=\"text\"] {\n    width: 100%;\n  }\n  &type=\"radio\"] {\n    float: left;\n  }\n  &[type=\"submit\"] {\n    padding: 15px;\n  }\n}</code></pre><p>Let&apos;s imagine another scenario: in designing an <a href='https://a11yproject.com/'>a11y</a>-compliant website, one of the requirements is to assign <a href='https://www.w3.org/WAI/intro/aria'>ARIA</a> <code>role</code> attributes to the relevant sections of the page. You have identified three sections that repeat on every page: a banner, the main content area, and a social links section. There are CSS styles that you want to add for each of the sections. Many times we might use classes for this, like <code>.banner</code>, <code>.main-content</code>, and <code>.social-links</code>, but you already have ARIA markup representing the <em>exact same thing</em>! You could easily use the <code>role</code> attribute to apply your styles.</p><pre class='line-numbers'><code class='language-html'><script type='prism-html-markup'><!-- We could use classes like this -->\n<div class=\"banner\" role=\"banner\"></div>\n<div class=\"main-content\" role=\"main-content\"></div>\n<div class=\"social-links\" role=\"social-links\"></div>\n\n<!-- Or we could use the ARIA role \nvalues to save ourselves some markup -->\n<div role=\"banner\"></div>\n<div role=\"main-content\"></div>\n<div role=\"social-links\"></div></script></code></pre><pre class='line-numbers'><code class='language-scss'>/* Using regular classes */\n.banner {\n  font-size: 2em;\n}\n.main-content {\n  font-size: 1em;\n}\n.social-links {\n  font-size: .8em;\n}\n\n/* Using the role attribute */\ndiv[role=\"banner\"] {\n  font-size: 2em;\n}\ndiv[role=\"main-content\"] {\n  font-size: 1em;\n}\ndiv[role=\"social-links\"] {\n  font-size: .8em;\n}\n\n/* SCSS */\ndiv {\n  &[role=\"banner\"] {\n    font-size: 2em;\n  }\n  &[role=\"main-content\"] {\n    font-size: 1em;\n  }\n  &[role=\"social-links\"] {\n    font-size: .8em;\n  }\n}</code></pre><h4>[attribute~=&quot;value&quot;], &quot;Whitespace Separated&quot; Selector</h4><p>The whitespace separated selector matches all elements where the specified attribute contains the word indicated. The value of the attribute may be alone or in a space delimited list. Let's look at an example using the <code>data-</code> attribute. According to the HTML specification, a <code>data-</code> attribute accepts only a single value. So if you had the element <code>&lt;div data-type=&quot;module accordion expand&quot;&gt;&lt;/div&gt;</code>, the value of the <code>data-type</code> attribute would be a single string <code>&quot;module accordion expand&quot;</code>. What if you wanted to extend this functionality to include a list of values? On the JavaScript side, you could use <code>split(' ')</code> to create an array of string values, but how could you access these values individually in CSS? Enter the whitespace separated selector!</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\ndiv[data-type~=\"module\"] {\n  /* Matches whenever 'module' is in the list */\n}\ndiv[data-type~=\"accordion\"] {\n  /* Matches whenever 'accordion' is in the list */\n}\ndiv[data-type~=\"expand\"] {\n  /* Matches whenever 'expand' is in the list */\n}\n\n/* SCSS */\ndiv {\n  &[data-type~=\"module\"] {\n    // Matches whenever 'module' is in the list\n  }\n  &data-type~=\"accordion\"] {\n    // Matches whenever 'accordion' is in the list\n  }\n  &[data-type~=\"expand\"] {\n    // Matches whenever 'expand' is in the list\n  }\n}</code></pre><p>It is worth noting that the word can appear in any position of the list (beginning, middle, end), but it must be separated by whitespace. There is another attribute selector that we will talk about later (<code>[attribute*=&quot;value&quot;]</code>) which selects a substring from an attribute value, however it is a bit less strict. If we were to have the selector <code>[attribute*=&quot;module&quot;]</code> it would match the substring <code>'submodule'</code> as well as <code>'module'</code>. The whitespace separated selector will only match the exact word.</p><h4>[attribute|=&quot;value&quot;], &quot;Dash Separated&quot; Selector</h4><p>Similar to the whitespace separated selector, the dash separated selector will only match if the selected attribute value is at the <strong>start</strong> of a dash-separated list. I have not found this to be a widely used selector, but one perfect use case is selecting language subcodes. Consider the following markup:</p><pre class='line-numbers'><code class='language-html'><script type='prism-html-markup'><div>\n  <span lang=\"en-US\">English US</span>\n  <span lang=\"en-GB\">English UK</span>\n  <span lang=\"de\">German</span>\n</div></script></code></pre><p>If we wanted to select only the English version languages, we could use the dash separated selector.</p><pre class='line-numbers'><code class='language-css'>/* Matches both 'en-US' and 'en-GB' */\nspan[lang|=\"en\"] {\n  color: blue;\n}</code></pre><p>Like the whitespace separated selector, the attribute value must match the entire word before the first dash. For other use cases, like if you wanted to match both <code>rel=&quot;example1&quot;</code> and <code>rel=&quot;example2&quot;</code>, you could use the begins&ndash;with selector (<code>[attribute^=&quot;value&quot;]</code>) discussed next. </p><h3>CSS3 Substring Matching Attribute Selectors</h3><p>With the release of CSS3, the <a href='https://www.w3.org/'>W3C</a> introduced three new attribute selectors called substring matching attribute selectors. These selectors work with the value of the specified attribute to match the beginning, end, or slice of the value to a given substring.</p><h4>[attribute^=&quot;value&quot;], &quot;Begins&ndash;With&quot; Selector</h4><p>The begins&ndash;with selector matches any element with an attribute value beginning with the specified substring. For example, if you wanted to target all the <code>img</code> tags from a particular directory, you could use a selector like this:</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\nimg[src^=\"products/\"] {\n  width: 100%;\n  height: auto;\n}\n\n/* SCSS */\nimg {\n  &[src^=\"products/\"] {\n    width: 100%;\n    height: auto;\n  }\n}</code></pre><p>Any images that are retrieved from the products directory are matched, while any images with a path beginning with something other than <code>products/</code> are not matched.</p><h4>[attribute$=&quot;value&quot;], &quot;Ends&ndash;With&quot; Selector</h4><p>A mirror to the begins&ndash;with selector, the ends&ndash;with selector matches any element with an attribute value ending with the specified substring. A perfect example is adding an image icon to links based on the file type.</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\na[href$=\".pdf\"] {\n  background: transparent url(icon-pdf.png) center right no-repeat;\n  padding-right: 20px;\n}\na[href$=\".docx\"] {\n  background: transparent url(icon-docx.png) center right no-repeat;\n  padding-right: 20px;\n}\na[href$=\".xlsx\"] {\n  background: transparent url(icon-xlsx.png) center right no-repeat;\n  padding-right: 20px;\n}\n\n/* SCSS */\na {\n  &[href$=\".pdf\"] {\n    background: transparent url(icon-pdf.png) center right no-repeat;\n    padding-right: 20px;\n  }\n  &[href$=\".docx\"] {\n    background: transparent url(icon-docx.png) center right no-repeat;\n    padding-right: 20px;\n  }\n  &[href$=\".xlsx\"] {\n    background: transparent url(icon-xlsx.png) center right no-repeat;\n    padding-right: 20px;\n  }\n}</code></pre><h4>[attribute*=&quot;value&quot;], &quot;Contains&quot; Selector</h4><p>The last of the substring selectors is the contains selector. This is a versatile selector that will match any element with an attribute value that contains at least one instance of the substring, located anywhere within the value. Let's say you had HTML markup with different costume products. The <code>id</code> attribute values are all different, but you still wanted to select all the costume products.</p><pre class='line-numbers'><code class='language-html'><script type='prism-html-markup'><div>\n  <div id=\"renaissance-costume\"></div>\n  <div id=\"anime-costume-bundle\"></div>\n  <div id=\"discount-costumes\"></div>\n</div></script></code></pre><p>You could solve this situation using the contains selector!</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\ndiv[id*=\"costume\"] {\n  padding: 2em;\n}\n\n/* SCSS */\ndiv {\n  &[id*=\"costume\"] {\n    padding: 2em;\n  }\n}</code></pre><h3>Combining Attribute Selectors</h3><p>Just like all other CSS selectors, attribute selectors can be chained with any other selector. In the Bootstrap example we saw at the beginning of this post we had an exact value attribute selector chained with a class selector.</p><pre class='line-numbers'><code class='language-css'>input[type=\"submit\"].btn-block,\ninput[type=\"reset\"].btn-block,\ninput[type=\"button\"].btn-block {\n  width: 100%;\n}</code></pre><p>This example uses a combination of attribute selector and class selector to match all <code>input</code> tags with the types <code>submit</code>, <code>reset</code>, and <code>button</code> and the class <code>.btn-block</code></p><p>The same can be done with two attribute selectors. For example, let's say we want to target copyright links that go to a specific domain, but there are multiple subpaths (like <em>&quot;https://www.example.org/first-copyright&quot;</em> and <em>&quot;https://www.example.org/second-copyright&quot;</em>). Our first thought is to use a begins&ndash;with selector to capture links that begin with the string <em>&quot;https://www.example.org/&quot;</em>, but there is a catch. Our site also has links to content pages in the same domain (<em>&quot;https://www.example.org/article-content&quot;</em>). We only want the copyright links. We can solve this problem by combining an exact value selector with a begins&ndash;with selector.</p><pre class='line-numbers'><code class='language-scss'>/* CSS */\na[rel=\"copyright\"][href^=\"https://www.example.org/\"] {\n  text-decoration: underline;\n}\n\n/* SCSS */\na {\n  &[rel=\"copyright\"] {\n    &[href^=\"https://www.example.org/\"] {\n      text-decoration: underline;\n    }\n  }\n}</code></pre><p>There is a lot of granularity available with CSS attribute selectors. For an excellent cheat sheet of CSS attribute selectors as well as many others, check out <a href='http://www.cheetyr.com/css-selectors'>this list</a> by Cheetyr. If you are interested in diving into the specs, there is great information at <a href='https://www.w3.org/TR/#tr_CSS'>W3C</a>.</p>"
      },
      {
        "topic": "Modern JavaScript",
        "title": "Destructuring",
        "nav_label": "destructuring",
        "date": "2017/12/17",
        "content": "<p>As developers, we often spend quite a bit of time extracting data from objects and arrays. Destructuring allows us an efficient way to achieve this by using patterns to extract multiple values from data structures. We often see destructuring used in variable declarations and assignments, but it can also be used in other locations that receive data &mdash; such as function parameters and the <code>for-of</code> loop. With the release of ES6, new syntactic sugar was introduced to ease the manipulation of data in destructuring statements. These patterns closely resemble those of array and object literals, and they are fail-soft, which means that values not found will return <code>undefined</code> rather than an error.</p><h3>What We Gain</h3><p>In order to fully understand array and object destructuring, we should first look at the corresponding construction statements. We can construct arrays and objects using a verbose syntax as follows:</p><pre class='line-numbers'><code class='language-javascript'>// Define an Array\nvar myArray = new Array();\nmyArray.push('first');\nmyArray.push(new Array());\nmyArray.push('third');\n\n// add to nested Array\nmyArray[1].push('second');\n\n// Define an Object\nvar myObject = new Object();\nobject.name = 'Arthur';\nobject.number = 42;\nobject.vehicle = new Object();\n\n// add to nested object\nobject.vehicle.type = 'Spaceship';</code></pre><p>The same verbose syntax is used to extract data from these structures.</p><pre class='line-numbers'><code class='language-javascript'>// myArray ['first', ['second'], 'third']\nvar first = myArray[0],\n    nestedArr = myArray[1],\n    second = second[0],\n    third = myArray[2];\n\nconsole.log(first, second, third);  // output: 'first', 'second', 'third'\n\n// myObject {name: 'Arthur', number: 42, vehicle: {type: 'Spaceship'}}\nvar who = myObject.name,\n    what = myObject.number,\n    myObject = myObject.vehicle,\n    where = myObject.type;\n\nconsole.log(who, what, where); // output: 'Arthur', 42, 'Spaceship'</code></pre><p>Our construction statements can be shortened dramatically if we use array and object literal syntax.</p><pre class='line-numbers'><code class='language-javascript'>// Define an Array\nvar myArray = ['first', ['second'], 'third'];\n\n// Define an Object\nvar myObject = {name: 'Arthur', number: 42, vehicle: {type: 'Spaceship'}}</code></pre><p>Prior to ES6, there was no corresponding mechanism for extracting data. If we wanted to retrieve data from arrays or objects, we had to use the verbose syntax. ES6 destructuring provides an efficient alternative to the verbose syntax for extracting data, filling the missing correlation to array and object literal construction statements. Using a similar syntax, ES6 destructuring allows us to quickly retrieve values from these structures and assign them to variables.</p><h3>Array Destructuring</h3><p>Array destructuring assignment uses an array literal pattern on the left-hand side of an assignment operation. Taking the example of <code>myArray</code> above we can rewrite our extraction statement as follows:</p><pre class='line-numbers'><code class='language-javascript'>// myArray ['first', ['second'], 'third']\nlet [one, [two], three] = myArray;\n\nconsole.log(one, two, three);  // output: 'first', 'second', 'third'</code></pre><p>This example shows two levels of destructuring: one for the primary array, and one for the nested array. To make the syntax clear, let&apos;s break down the example.</p><pre class='line-numbers'><code class='language-javascript'>// myArray ['first', ['second'], 'third']\n\n// shallow destructuring\nlet [one, two, three] = myArray;\nconsole.log(one, two, three);  // output: 'first', ['second'], 'third'\n\n// nesting the same left-hand pattern to access value in a nested Array\nlet [one, [two], three] = myArray;\nconsole.log(one, two, three);  // output: 'first', 'second', 'third'</code></pre><h4>Skipping indicies</h4><p>This looks pretty straightforward, but what if we want only some of the values in the array? If our left-hand pattern has fewer variables than the array has values, it will assign the first values it finds until the variables are filled; but if we want to extract later values, we need to skip indices by using commas.</p><pre class='line-numbers'><code class='language-javascript'>// myArray ['first', ['second'], 'third']\n\nlet [one, three] = myArray;\nconsole.log(one, three);  // output: 'first', ['second']\n\n[, , three] = myArray;\nconsole.log(one, three);  // output: 'first', 'third'\n\nlet [, [two], ] = myArray;\nconsole.log(two);         // output: 'second'\n/* the last comma may also be omitted, i.e. [, [two]] */</code></pre><h4>Array patterns with iterables</h4><p>Array destructuring uses an <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators'>iterator</a> to get to the values of a source. Therefore, any source that is iterable can be used with array destructuring patterns. If a source is not iterable, using an array destructuring pattern will throw a <code>TypeError</code>.</p><pre class='line-numbers'><code class='language-javascript'>// Strings are iterable\nlet [x, y, z] = 'abc';\nconsole.log(x, y, z);     // output: 'a', 'b', 'c'\n\n// Sets are iterable (although you cannot access their elements via indices)\nconst mySet = new Set(['d', 'e', 'f']);\n[x, y, z] = mySet;\nconsole.log(x, y, z);     // output: 'd', 'e', 'f'\n\n// objects are not iterable\nconst myObj = {a:1, b:2, c:3};\n[x, y, z] = myObj;        // throws: Uncaught TypeError: ... is not iterable</code></pre><h3>Object Destructuring</h3><p>Object destructuring works much the same way as array destructuring, except you use an object literal destructure pattern for the left-hand side assignment operation. Rewriting our <code>myObject</code> example above using object destructuring, we get the following:</p><pre class='line-numbers'><code class='language-javascript'>// myObject {name: 'Arthur', number: 42, vehicle: {type: 'Spaceship'}}\nlet {name: who, number: what, vehicle: {type: where}} = myObject;\n\nconsole.log(who, what, where); // output: 'Arthur', 42, 'Spaceship'</code></pre><p>Here we are using an object pattern on the left-hand side (resembling an object literal), and replacing the property values with variables. Like array destructuring, the pattern is recursive and can be repeated for nested objects. If we declare a property in our object pattern that does not exist in the source structure, the value will be set to <code>undefined</code>. However, this fail-soft behavior does not apply when attempting to assign a child property to a missing parent property.</p><pre class='line-numbers'><code class='language-javascript'>// myObject {name: 'Arthur', number: 42, vehicle: {type: 'Spaceship'}}\nlet {\n  name: who, \n  number: what, \n  age: when,\n  vehicle: {type: where}\n} = myObject;\n\nconsole.log(who, what, when, where); // output: 'Arthur', 42, undefined, 'Spaceship'\n\nlet {\n  name: who, \n  number: what, \n  age: {\n    birthYear: when\n  },\n  vehicle: {\n    type: where\n  }\n} = myObject;\n/* throws: Uncaught TypeError: Cannot destructure property `birthYear` \n  of 'undefined' or 'null'. */</code></pre><h4>Object destructuring shorthand</h4><p>If we use variable names that match our source object properties, we can take advantage of a shorthand syntax.</p><pre class='line-numbers'><code class='language-javascript'>// myObject {name: 'Arthur', number: 42, vehicle: {type: 'Spaceship'}}\nlet {name, number, vehicle} = myObject;\n\nconsole.log(name, number, vehicle); // output: 'Arthur', 42, {type: 'Spaceship'}</code></pre><h4>Assignment-only object destructuring</h4><p>We can use object destructuring to assign variables that have already been declared. However, because JavaScript uses curly braces to define a code block, we must wrap the entire statement in parentheses.</p><pre class='line-numbers'><code class='language-javascript'>let name, number, vehicle;\n\n{name, number, vehicle} = myObject; // throws: Uncaught SyntaxError: Unexpected token\n\n({name, number, vehicle} = myObject);\nconsole.log(name, number, vehicle); // output: 'Arthur', 42, {type: 'Spaceship'}</code></pre><h3>Destructured Parameters</h3><p>Destructuring is not limited to variable declaration and assignment; it can also be used in parameter definitions. This is particularly useful for functions that accept an <code>options</code> object. Without destructuring, we might write our function like this:</p><pre class='line-numbers'><code class='language-javascript'>function animate(options) {\n  var speed = options.speed,\n      delay = options.delay,\n      duration = options.duration;\n\n  console.log(speed, delay, duration);\n}\n\nvar config = {speed: 400, delay: 100, duration: 5000};\nanimate(config);  // output: 400, 100, 5000</code></pre><p>Using ES6 destructuring, we eliminate the need to declare extra variables within our function.</p><pre class='line-numbers'><code class='language-javascript'>function animate({speed, delay, duration}) {\n  console.log(speed, delay, duration);\n}\n\nconst config = {speed: 400, delay: 100, duration: 5000};\nanimate(config);  // output: 400, 100, 5000</code></pre><p>Since our destructuring is fail-soft, any object arguments not included in the function call will be set to undefined. We can use <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters'>default parameters</a> (introduced in ES6) <em>within</em> our object destructure pattern to handle this.</p><pre class='line-numbers'><code class='language-javascript'>// ES5\nfunction animate1(options) {\n  options = options || {};\n  var speed = options.speed || 100,\n      delay = options.delay || 0,\n      duration = options.duration || 1000;\n\n  console.log(speed, delay, duration);\n}\n\n// ES6\nfunction animate2({speed=100, delay=0, duration=1000} = {}) {\n  console.log(speed, delay, duration);\n}\n\nconst config1 = {speed: 100, duration: 5000};\nconst config2 = {speed: 400, delay: 100};\nanimate1(config1);  // output: 100, 0, 5000\nanimate2(config2);  // output: 400, 100, 1000</code></pre><h3>Destructuring with the Rest Operator</h3><p>We can combine destructuring with another syntax sugar, the <a href='/blog/rest-and-spread'>rest operator</a>. In array destructuring, the rest operator will take the remaining array values, create a new array out of them, and assign it to the destructuring target.</p><pre class='line-numbers'><code class='language-javascript'>var standings = ['Emily', 'John', 'Taylor', 'Bob', 'Sue'];\n\n// ES5var first = standings[0],\n    second = standings[1],\n    third = standings[2],\n    participants = standings.slice(3);\n\nconsole.log(first, second, third, participants);\n// output: 'Emily', 'John', 'Taylor', ['Bob', 'Sue']\n\n//ES6\nlet [first, second, third, ...participants] = standings;\n\nconsole.log(first, second, third, participants);\n// output: 'Emily', 'John', 'Taylor', ['Bob', 'Sue']</code></pre><p>Array destructuring with the rest operator has been approved since ES6, however, object destructuring using the rest operator is currently a <a href='https://github.com/tc39/proposal-object-rest-spread'>Stage 3 proposal</a> for ECMAScript. It works much the same way as array destructuring with rest, except that it collects the <em>own enumerable property keys</em> that were not already defined in the destructuring pattern.</p><pre class='line-numbers'><code class='language-javascript'>const standings = {\n  first: 'Emily',\n  second: 'John',\n  third: 'Taylor',\n  fourth: 'Bob',\n  fifth: 'Sue'\n};\n\nlet {first, second, third, ...participants} = standings;\n\nconsole.log(first, second, third, participants);\n// output: 'Emily', 'John', 'Taylor', {fourth: 'Bob', fifth: 'Sue'}</code></pre><h3>Use Cases</h3><p>As we have seen, destructuring provides a convenient and concise syntax for a number of common programming tasks. Here are a few more common use cases:</p><h4>Mixed object and array destructuring</h4><p>Extracting values from large JSON structures is a common development requirement. These JSON structures often contain a mixture of objects, arrays, and single values. We can combine object and array destructuring patterns to pick out the values we need without having to navigate the entire structure.</p><pre class='line-numbers'><code class='language-javascript'>let json = {\n  \"id\": 12,\n  \"type\": \"donut\",\n  \"name\": \"Cake\",\n  \"ingredients\": {\n    \"flour\": \"1.5 cups\",\n    \"sugar\": \"1 cup\",\n    \"butter\": \"0.5 cup\"\n  },\n  \"batters\": [ \"Regular\", \"Chocolate\", \"Blueberry\", \"Devil's Food\" ],\n  \"topping\": [\n    { \"id\": \"5001\", \"type\": \"None\" },\n    { \"id\": \"5002\", \"type\": \"Glazed\" },\n    { \"id\": \"5007\", \"type\": \"Powdered Sugar\" },\n    { \"id\": \"5006\", \"type\": \"Chocolate with Sprinkles\" },\n    { \"id\": \"5003\", \"type\": \"Chocolate\" },\n    { \"id\": \"5004\", \"type\": \"Maple\" }\n  ]\n};\n\nlet {\n  type,\n  ingredients: {sugar: amtSugar},\n  batters: [, flavor],\n  topping: [,,, {type: frosting}]\n} = json;\n\nconsole.log(type, amtSugar, flavor, frosting);\n// output: 'donut', '1 cup', 'Chocolate', 'Chocolate with Sprinkles'</code></pre><h4>Swapping values</h4><p>A well-known programming pattern is the need to swap values between two variables. This is commonly achieved by the use of a <code>temp</code> variable. However, by using destructuring with an array literal, we eliminate the need for a <code>temp</code> variable.</p><pre class='line-numbers'><code class='language-javascript'>let a = 1,\n    b = 2,\n    temp;\n\n// Without destructuring\ntemp = a;\na = b;\nb = temp;\n\n// With destructuring\n[b, a] = [a, b];  // the right-hand side creates an array literal that is then destructured</code></pre><h4>Handling return values</h4><p>Some functions return a variety of information in the form of an object, but we may only need a small piece or pieces of that data. We can use destructuring to pick out only the data we need.</p><pre class='line-numbers'><code class='language-javascript'>function getEmployee(id) {\n  // data call that fetches employee object\n  // employee = {name: 'Tom', position: 'Developer', tenure: 3}\n  return employee;\n}\n\n// get name only\nlet {name: employee} = getEmployee(4954);\nconsole.log(employee);  // output: 'Tom'\n\n// get name and position\nlet {name, position} = getEmployee(4954);\nconsole.log(name, position);  // output: 'Tom', 'Developer'</code></pre><p>As you can see, destructuring offers some powerful syntax to complete everyday development tasks. It can also be combined with other ES6 features, such as default parameters and the rest operator, to create even more elegant and efficient source code.</p>"
      },
      {
        "topic": "Learning Webpack",
        "title": "Adding Loaders",
        "nav_label": "adding-loaders",
        "date": "2017/12/28",
        "content": "<h3>What is a Loader?</h3><p>In <a href='/blog/webpack-configuration'>Building a Configuration File</a> we looked at how Webpack bundles resources into an output file. While up to this point we have only bundled JavaScript files, it is important to note that Webpack is fundamentally a <strong><a href='https://webpack.js.org/concepts/modules/'>module</a></strong> bundler &mdash; meaning that we can bundle many types of modules, including Sass/CSS, HTML, fonts, and even images! When we compiled our JavaScript modules, we did not need to add any additional configuration to the basic Webpack setup, but for non-JavaScript modules, we will need to use loaders.</p><p>The Webpack <a href='https://webpack.js.org/concepts/loaders/'>documentation</a> describes loaders as follows:</p><blockquote>Loaders are transformations that are applied on the source code of a module. They allow you to pre-process files as you import or &quot;load&quot; them.</blockquote><p>Loaders are fundamentally functions. They take a source file as an input parameter and return a transformed version of it as the output. Webpack then takes the transformed output and includes it in the application&apos;s <a href='https://webpack.js.org/concepts/dependency-graph/'>dependency graph</a>, and eventually, the final bundle file (in our case <code>bundle.js</code>).</p><h3>Adding loaders to <code>webpack.config.js</code></h3><p>In the last post, we discovered that a Webpack configuration is just an exported object. To use loaders, we will add a new property with the key <code>module</code> to our configuration object. This property has an object as its value. In the <code>module</code> object we define the property <code>rules</code>, which contains an array that will store our loaders.</p><pre class='line-numbers'><code class='language-javascript'>module.exports = {\n  entry: __dirname + '/src/app.js',\n  output: {\n    path: __dirname + '/dist',\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: []\n  }\n};</code></pre><p>Each loader has two required configuration properties:</p><ol><li>The <code>test</code> property identifies the source file (or files) to be transformed.</li><li>The <code>use</code> property identifies the loader (or loaders) that should be used.</li></ol><p>In the <code>test</code> property, we enter a <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions'>Regular Expression</a> that will be applied to our source files. Modules that match the RegEx will be transformed using the loader (or loaders) that we defined in the <code>use</code> property. In the following example, we are instructing Webpack to take any module with a path that resolves to <code>.txt</code>, and use the <code>raw-loader</code> to transform it before adding it to the bundle.</p><pre class='line-numbers'><code class='language-javascript'>module.exports = {\n  entry: __dirname + '/src/app.js',\n  output: {\n    path: __dirname + '/dist',\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.txt$/, \n        use: 'raw-loader'\n      }\n    ]\n  }\n};</code></pre><h3>Adding HTML Templates</h3><p>Let&apos;s take an example to see loaders at work. We would like to include HTML templates in our application. Since Webpack only natively understands JavaScript, we are going to need to make some transformations on our HTML files in order to include them in our bundle. We can achieve this using the <a href='https://github.com/webpack-contrib/html-loader'>HTML loader</a>.</p><p>Using the project we began in <a href='/blog/webpack-configuration'>Building a Configuration File</a>, we first need to install our loader using NPM. Then we can add it to our Webpack configuration file in the <code>rules</code> array.</p><pre><code class='language-bash'>npm install html-loader --save-dev</code></pre><p><strong>webpack.config.js</strong></p><pre class='line-numbers'><code class='language-javascript'>module.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.html$/, \n        use: 'html-loader'\n      }\n    ]\n  }\n};</code></pre><p>Now, let&apos;s add an <code>html</code> directory to <code>src</code>, and create a new HTML template.</p><pre><code class='language-bash'>mkdir src/html\ntouch src/html/hello.html</code></pre><p><strong>hello.html</strong></p><pre class='line-numbers'><code class='language-html'><h1>Hello!</h1>\n<p>Learning Webpack is fun.</p>\n<button>More awesome</button></code></pre><p>We are going to delete what we previously had in <code>app.js</code>, and rewrite it to import our <code>hello.html</code> module, then log it to the console.</p><p><strong>app.js</strong></p><pre class='line-numbers'><code class='language-javascript'>import hello from './html/hello.html';\n\nconsole.log(hello);</code></pre><p>We can test that the HTML loader is working by building our bundle and running it in Node.</p><pre><code class='language-bash'>npm run build\nnode dist/bundle.js\n\noutput:\n\n<h1>Hello!</h1>\n<p>Learning Webpack is fun.</p>\n<button>More awesome</button></code></pre><p>Now that we know our loader is working, let&apos;s create a webpage for our application, and inject <code>hello.html</code> into the DOM.</p><pre><code class='language-bash'>touch dist/index.html</code></pre><p><strong>index.html</strong></p><pre class='line-numbers'><code class='language-html'><script type='prism-html-markup'><html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Learning Webpack: Adding Loaders</title>\n</head>\n<body>\n  <div id=\"app\"></div>\n</script>  &lt;script src=\"bundle.js\">&lt;/script><script type='prism-html-markup'>\n</body>\n</html>  </script></code></pre><p><strong>app.js</strong></p><pre class='line-numbers'><code class='language-javascript'>import hello from './html/hello.html';\n\nvar app = document.getElementById('app');\napp.innerHTML = hello;</code></pre><p>When we re-complile with <code>npm run build</code> and open <code>index.html</code> in a browser, we can see our HTML template rendered on the page! Our loader has transformed <code>hello.html</code> into JavaScript and bundled it into <code>bundle.js</code>. When the browser loads <code>index.html</code>, it calls our bundled script and injects the template into the page.</p><h3>Injecting CSS Styles</h3><p>We can also use Webpack to bundle and inject CSS directly into the DOM. For this task, we will be using two loaders and chaining their output. Let&apos;s install <a href='https://github.com/webpack-contrib/style-loader'>style loader</a> and <a href='https://github.com/webpack-contrib/css-loader'>CSS loader</a>, and configure them in <code>webpack.config.js</code>. Note that this time we use an array for the <code>use</code> property of our <code>rules</code> object. This allows us to chain multiple loaders. The source modules are transformed by the loaders in order from bottom to top, so in our example <code>css-loader</code> will be run first, then <code>style-loader</code>.</p><pre><code class='language-bash'>npm install style-loader css-loader --save-dev</code></pre><pre class='line-numbers'><code class='language-javascript'>module.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.html$/, \n        use: 'html-loader'\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          { loader: 'style-loader' },\n          { loader: 'css-loader' }\n        ]\n      }\n    ]\n  }\n};</code></pre><p>Now that we have our style loaders, we need a stylesheet.</p><pre><code class='language-bash'>mkdir src/css\ntouch src/css/style.css</code></pre><p><strong>style.css</strong></p><pre class='line-numbers'><code class='language-css'>html, body {\n  background-color: #ddd;\n  font-family: sans-serif;\n}\n\n#app {\n  background-color: #fff;\n  width: 80%;\n  margin: 4% auto;\n  padding: 1.5em 4em;\n}\n\nh1 {\n  font-size: 1.8em;\n}\n\np {\n  font-family: monospace;\n  font-size: 1.2em;\n}</code></pre><p>We inject our styles into the DOM by importing the module in our entry file.</p><p><strong>app.js</strong></p><pre class='line-numbers'><code class='language-javascript'>import './css/style.css';\nimport hello from './html/hello.html';\n\nvar app = document.getElementById('app');\napp.innerHTML = hello;</code></pre><p>Now when we re-build using <code>npm run build</code> and inspect <code>index.html</code> in the browser, we can see the styles we included in the <code>&lt;head>&lt;/head></code> section of the page!</p><h3>Wait! There&apos;s More...</h3><p>We have seen how we can use loaders to transform modules into a format that JavaScript can understand, and then compile them into one bundle file. In this case, we used them to include HTML templates and CSS styles. Things get even more exciting when start adding other loaders. Here are a few of my favorites:</p><ul><li><code><a href='https://github.com/babel/babel-loader'>babel-loader</a></code> Transpiles ES2015+ code to ES5</li><li><code><a href='https://github.com/webpack-contrib/sass-loader'>sass-loader</a></code> Compiles Sass and SCSS to CSS</li><li><code><a href='https://github.com/gaearon/react-hot-loader'>react-hot-loader</a></code> Allows React components to be live reloaded without the loss of state</li><li><code><a href='https://github.com/webpack-contrib/url-loader'>url-loader</a></code> Emits a file into the output folder and returns the (relative) URL, or can return a data URL if the file is smaller than a limit</li></ul><p>In future posts, we will explore some of the loaders above, as well as learn how to add configuration to loaders using the <code>options</code> property.</p>"
      },
      {
        "topic": "Modern JavaScript",
        "title": "Arrow Functions",
        "nav_label": "arrow-functions",
        "date": "2018/1/8",
        "content": "<p>Arrow functions, sometimes called &quot;fat arrow&quot; functions, are essentially a shorthand form of anonymous function expressions. Anonymous functions used as data (Lambda functions) have been used in <a href='https://en.wikipedia.org/wiki/Lisp_(programming_language)'>Lisp</a> since 1958. However, the increase in complexity of client-side programming, with heavy use of asynchronous function callbacks, has increased the popularity of lambda functions. This has led many programming languages to adopt special lambda function syntax. JavaScript has always had the ability to create lambda functions, but when compared to the syntax of many other programming languages, it tends to be rather verbose.</p><ul><li><strong>C#: </strong><code>a => a > 0</code></li><li><strong>Java: </strong><code>a -> a > 0</code></li><li><strong>Python: </strong><code>lambda a: a > 0</code></li><li><strong>JavaScript (ES5-): </strong><code>function(a) { return a > 0; }</code></li></ul><p>Arrow functions shorten the syntax for anonymous functions and introduce lexical <code>this</code> binding, which makes writing lambdas and other anonymous functions much more convenient. Compare the previous ES5 example to the ES6 arrow function equivalent, and we can immediately see the difference in verbosity.</p><pre class='line-numbers'><code class='language-javascript'>// ES5\nfunction(a) { return a > 0; }\n\n// ES6\na => a > 0</code></pre><h3>Arrow Function Syntax</h3><p>The basic syntax for an arrow function is:</p><pre class='line-numbers'><code class='language-javascript'>parameters => expression</code></pre><p>There are a number of variations on the syntax depending on the requirements of the function. We can group these into two categories: the function parameters, and the function body.</p><h4>Function parameters</h4><p>The left-hand side of the arrow defines the function parameters. Parameters are enclosed in parenthesis, much like ES5 functions. The exception is when there is a single parameter &mdash; in this case the parenthesis are optional.</p><pre class='line-numbers'><code class='language-javascript'>// no parameters\nconst getRandom = () => Math.random() * 100;\n\n// single parameter\nconst increment = x => x + 1;\nconst increment = (x) => x + 1; // parenthesis are optional\n\n// multiple parameters\nconst add = (x, y) => x + y;\n\n// using rest and spead for unknown number of parameters\nconst sum = (...args) => [...args].reduce((x, y) => x + y, 0);</code></pre><p>ES6 forbids a line break between the parameter definitions and the arrow of an arrow function, however, line breaks after the arrow are permitted.</p><pre class='line-numbers'><code class='language-javascript'>// SyntaxError\nconst total = (x, y, z)\n  => x + y + z;\n\n// no error\nconst total = (x, y, z) => \n  x + y + z;</code></pre><h4>Function body</h4><p>The right-hand side of the arrow is the function body. This can contain a single expression, statement, or multiple statements. When using single or multiple statements, the body must be enclosed in curly braces. When curly braces are omitted, the function body is evaluated as an expression, and will be implicitly returned. A word of caution: when implicitly returning object literals the object must be wrapped in parentheses, otherwise the braces of the object literal will be interpreted as delimiting a code block.</p><pre class='line-numbers'><code class='language-javascript'>// single expression body\nconst getHello = (name) => `Hello ${ name }!`;\n\n// single statement body\nlet myError = e => throw e;     // SyntaxError\nlet myError = e => { throw e }; // correct\n\n// multiple statement body\nconst print = msg => {\n  let now = new Date();\n  console.log(${ msg } : ${ now });\n};\n\n// returning an object literal\nlet getCar = () => {\n  model: null,\n  year: null,\n  miles: null\n};     // SyntaxError\n\nlet getCar = () => ({\n  model: null,\n  year: null,\n  miles: null\n});    // function returns car object</code></pre><h4>Loose operator binding</h4><p>If we view the <code>=></code> as an operator, we would describe it as having a loose binding or low precedence, meaning that it generally loses conflicts with other operators. This is necesary to keep the expression body together. Consider the following example:</p><pre class='line-numbers'><code class='language-javascript'>const isEven = x => (x % 2) === 0 ? true : false;</code></pre><p>We want <code>=></code> to lose the race against <code>===</code> and <code>?</code>. In other words, we want the statement to be interpreted as:</p><pre class='line-numbers'><code class='language-javascript'>const isEven = x => (((x % 2) === 0) ? true : false);</code></pre><p>If <code>=></code> won the race against <code>===</code> and <code>?</code>, it would look like this:</p><pre class='line-numbers'><code class='language-javascript'>const isEven = (x => (x % 2)) === 0 ? true : false;</code></pre><p>If <code>=></code> lost against <code>===</code>, but won against <code>?</code>, it would look like this:</p><pre class='line-numbers'><code class='language-javascript'>const isEven = (x => ((x % 2) === 0)) ? true : false;</code></pre><p>If you find you have a conflict in operator precedence, wrap the entire arrow function in parentheses.</p><pre class='line-numbers'><code class='language-javascript'>console.log(typeof () => {});     // SyntaxError\nconsole.log(typeof (() => {}));   // output: function</code></pre><h4>Immediately&ndash;Invoked Arrow Functions (IIAFs)</h4><p>Immediately&ndash;Invoked Function Expressions (IIFEs) allow you to define a function expression and call it immediately. This helps to shield the code from the rest of the program by scoping it within the function. You can accomplish the same thing with Immediately&ndash;Invoked Arrow Functions (IIAFs):</p><pre class='line-numbers'><code class='language-javascript'>// IIFE\n(function() {\n    return 42;\n})();\n\n// IIAF\n(() => 42)();\n\n// optional syntax\n(() => { return 42 })();</code></pre><p>One difference between IIFEs and IIAFs is that the former allows you to call the function directly by placing the parentheses immediately after the function body. With IIAFs this is not allowed in order to remain consistent with arrow functions whose bodies are expressions.</p><pre class='line-numbers'><code class='language-javascript'>// IIFE\n(function () {\n    return 42;\n}());\n\n// IIAF\n(() => { return 42 }());  // SyntaxError\n(() => { return 42 })();  // correct\n\n// IIAF with expression body\n// foo = () => 'bar'\n(() => foo());\n\n// should be interpreted as\n( () => (foo()) );\n// output: () => foo()\n\n// not as\n( (() => foo)() );\n// output: () => 'bar'</code></pre><h3>Lexical <code>this</code></h3><p>Traditional JavaScript functions behave a little differently than other languages when it comes to the <code>this</code> keyword. In JavaScript, functions define their own <code>this</code>, which proves problematic when you want to access the enclosing scope.</p><pre class='line-numbers'><code class='language-javascript'>// bug: 'this' is bound to the 'window' object\nvar player = {\n  points: 0,\n  score(opponents){\n    opponents.forEach(function(){\n      this.points++;\n    });\n  }\n}\n\nplayer.score(['ogre', 'ogre', 'troll']);\nconsole.log(player.points);  // output: 0</code></pre><p>In the past, we have been able to get around this by using one of two methods:</p><ol><li>Store a reference to <code>this</code> in a variable.</li><li>Pass the <code>this</code> context into our anonymous function using the ES5 <code>bind()</code> method.</li></ol><pre class='line-numbers'><code class='language-javascript'>// solution 1: store 'this' in a variable\nvar player = {\n  points: 0,\n  score(opponents){\n    var _this = this;\n    opponents.forEach(function(){\n      _this.points++;\n    });\n  }\n}\n\nplayer.score(['ogre', 'troll']);\nconsole.log(player.points);  // output: 2\n\n// solution 2: use 'bind()' method\nvar player = {\n  points: 0,\n  score(opponents){\n    opponents.forEach(function(){\n      this.points++;\n    }.bind(this));\n  }\n}\n\nplayer.score(['ogre', 'troll', 'ogre']);\nconsole.log(player.points);  // output: 3</code></pre><p>With ES6 arrow functions, we have implicit <code>this</code> binding. This means we no longer need to use alternate variables or the <code>bind()</code> method.</p><pre class='line-numbers'><code class='language-javascript'>let player = {\n  points: 0,\n  score(opponents){\n    opponents.forEach(() => {\n      this.points++;\n    });\n  }\n}\n\nplayer.score(['ogre', 'ogre', 'troll']);\nconsole.log(player.points);  // output: 3</code></pre><h3>When Not to Use Arrow Functions</h3><p>Arrow functions offer a concise syntax, and are well suited for higher-order functions like <code>map</code>, <code>filter</code>, and <code>reduce</code>. There are some cases, however, where arrow functions might not be the best choice. Generally, the decision boils down to how the <code>this</code> keyword is bound.</p><h4>Defining methods on an object</h4><p>In JavaScript, methods are functions stored in an object property. When calling a method, we want <code>this</code> to refer to the object that the method belongs to. If instead, we use an arrow function in an object property, <code>this</code> gets bound to the <code>window</code> object, not the object instance. The lexical context of <code>this</code> is actually the <code>window</code>, not the object instance. Therefore, it is better to use a regular function, or <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions'>shorthand syntax</a> when defining object methods.</p><pre class='line-numbers'><code class='language-javascript'>/* Object literal */\nconst person = {\n  name: 'Tom',\n  whoAmI: () => {\n    return this;\n  }\n}\nperson.whoAmI();\n// output: 'window'\n\n/* Object prototype */\nfunction Person(name) {\n  this.myName = name;\n}\n\nPerson.prototype.sayName = () => {\n  return this.myName;\n}\n\nconst person = new Person('Tom');\nperson.sayName();\n// output: undefined\n\n/* ES5 Shorthand syntax */\nconst person = {\n  name: 'Tom',\n  whoAmI() {\n    return this;\n  }\n}\nperson.whoAmI();\n// output: {name: 'Tom', whoAmI: ƒ}\n\n/* Traditional function */\nfunction Person(name) {\n  this.myName = name;\n}\n\nPerson.prototype.sayName = function() {\n  return this.myName;\n}\n\nconst person = new Person('Tom');\nperson.sayName();\n// output: 'Tom'</code></pre><h4>Callback functions with dynamic context</h4><p>In a standard JavaScript function <code>this</code> is bound dynamically. This allows us to change the context depending on how the function is called. We see this at work when adding event handler callbacks to the <code>addEventListener()</code> method. The following code will toggle the <code>active</code> class on a button element when it is clicked. We want the context in this example to be the button object. However, since in arrow functions <code>this</code> is statically bound, the context for our event handler is the <code>window</code> object, not the button element we intend. In cases like this, it is better to use a function expression, as it correctly binds <code>this</code> to the calling object.</p><pre class='line-numbers'><code class='language-javascript'>// incorrect\nconst button = document.getElementById('myButton');\nbutton.addEventListener('click', () => {\n  this.classList.toggle('active');\n  console.log(this);  // output: 'window'\n});\n\n// correct\nconst button = document.getElementById('myButton');\nbutton.addEventListener('click', function() {\n  this.classList.toggle('active');\n  console.log(this);  // output: 'button'\n});</code></pre><h4>Invoking constructors</h4><p>When invoking a constructor function, <code>this</code> is the newly created object. Since the scoping of <code>this</code> in an arrow function points to the enclosing context (not the newly created object), you get an error if you try to use an arrow function as a constructor.</p><pre class='line-numbers'><code class='language-javascript'>const Message = (text) => {\n  this.text = text;\n};\n\nlet hello = new Message('Hello World!');\n// output: TypeError: Message is not a constructor</code></pre><h4>Functions using the <code>arguments</code> object</h4><p>For functions with an unknown number of parameters, the <code>arguments</code> object provides access to the arguments in the form of an array-like iterable object. In the ES6 specification, no arguments variable is created for an arrow function.</p><pre class='line-numbers'><code class='language-javascript'>let makeArray = function() {\n  return Array.from(arguments);\n}\nmakeArray('a','b','z','c');\n// output: ['a','b','z','c']\n\nlet makeArray = () => {\n  return Array.from(arguments);\n}\nmakeArray('a','b','z','c');\n// output: ReferenceError: arguments is not defined</code></pre><p>Instead, if you need to access a variable number of arguments in an arrow function, you can use the rest operator. This provides a workaround to the lack of an <code>arguments</code> object, however, be aware that the <code>rest</code> operator returns a true array, not an array-like object.</p><pre class='line-numbers'><code class='language-javascript'>let makeArray = (...args) => {\n  return args;  // the rest operator already creates an array\n}\nmakeArray('a','b','z','c');\n// output: ['a','b','z','c']</code></pre><p>As we&apos;ve seen, arrow functions offer an elegant simplicity when writing anonymous functions. Additionally, the lexical binding of arrow functions comes in handy in situations where <code>bind()</code> is necessary. (We see this often in <a href='https://reactjs.org/'>React</a> component class definitions.) But before you start using arrow functions everywhere, it is a good idea to know the differences between arrow functions and function definitions or function expressions. Doing so will help you decide which function syntax is the most appropriate, and can help prevent unintended bugs.</p>"
      }
    ]
  }
}
